grammar Simple
  rule statement
    while / assign / if
  end

  rule while
    'while (' condition:expression ') { ' body:statement ' }' {
      def to_ast
        While.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule assign
    name:[a-z]+ ' = ' expression {
      def to_ast
        Assign.new(name.text_value.to_sym, expression.to_ast)
      end
    }
  end

  rule if
    'if (' condition:expression ') { ' consequence:statement ' } else { ' alternative:statement ' }' {
      def to_ast
        If.new(condition.to_ast, consequence.to_ast, alternative.to_ast)
      end
    }
  end

  rule expression
    less_than / operation
  end

  rule less_than
    left:operation ' < ' right:less_than {
      def to_ast
        LessThan.new(left.to_ast, right.to_ast)
      end
    }
    /
    operation
  end

  rule operation
    left:term operator:(' * ' / ' + ') right:operation {
      def to_ast
        case operator.text_value
          when ' * '
            Multiply.new(left.to_ast, right.to_ast)
          when ' + '
            Add.new(left.to_ast, right.to_ast)
        end
      end
    }
    /
    term
  end

  rule term
    number / variable / boolean
  end

  rule number
    [0-9]+ {
      def to_ast
        Number.new(text_value.to_i)
      end
    }
  end

  rule variable
    [a-z]+ {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule boolean
    (true/false) {
      def to_ast
      	case text_value
      	  when 'true'
      	    Boolean.new(true)
      	  when 'false'
      	    Boolean.new(false)
      	end
      end
    }
  end

end